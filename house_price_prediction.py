# -*- coding: utf-8 -*-
"""house_price_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wAJLbwBvVepE_yWkIdUG6arON-XhmIM9
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# load data
df=pd.read_csv("/content/data.csv")

#head
df.head(5)

#shape
df.shape

# info
df.info()

df.isnull().sum()

df.nunique()

df.describe()

df_numeric = df.select_dtypes(include=['int64', 'float64'])
df_corr = df_numeric.corr()
plt.figure(figsize=(10,8))
sns.heatmap(df_corr,annot=True,cmap='coolwarm')
plt.title("correlation matrics")
plt.show()

df.columns

columns_to_remove=['date','yr_renovated','street', 'city','statezip', 'country']
df=df.drop(columns=columns_to_remove)

df.head()

import scipy.stats as stats
z_scores=stats.zscore(df)
threshold=3
print("size before removing outliers:",df.shape)
outliers_df=df[(z_scores>threshold).any(axis=1)]
df=df[(z_scores<=threshold).all(axis=1)]
print("size after removing outliers:",df.shape)

outliers_df.head()

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
scaler.fit(df)
df_scaled=pd.DataFrame(scaler.transform(df),columns=df.columns)

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsRegressor
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor

x=df.drop("price",axis=1)
y=df['price']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=42)

print(f'xtrain shape:{x_train.shape}')
print(f'xtest shape:{x_test.shape}')

models=[
    ('random forest',RandomForestRegressor()),
    ('decision tree',DecisionTreeRegressor()),
    ('linear regression',LinearRegression()),
    ('knn',KNeighborsRegressor())
]

from sklearn.metrics import mean_squared_error,r2_score,mean_absolute_error

for name,model in models:
  print(name)
  print()
  model.fit(x_train,y_train)
  y_pred=model.predict(x_test)
  print('mean squared error:',mean_squared_error(y_test,y_pred))
  print('\n')
  print('r2 score:',r2_score(y_test,y_pred))
  print('\n')
  print('mean absolute error:',mean_absolute_error(y_test,y_pred))
  print('\n')

sample_data = pd.DataFrame([{
    "bedrooms": 3,
    "bathrooms": 2,
    "sqft_living": 1800,
    "sqft_lot": 5000,
    "floors": 1.0,
    "waterfront": 0,
    "view": 0,
    "condition": 3,
    "sqft_above": 1500,
    "sqft_basement": 300,
    "yr_built": 2000
   }])
predicted_price = model.predict(sample_data)
print(" Predicted Price:", predicted_price[0])